"""Add role to user and user_warehouse_assignments table

Revision ID: 0b98175a0320
Revises: efg567890123
Create Date: 2025-09-29 13:25:40.685581

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0b98175a0320'
down_revision: Union[str, Sequence[str], None] = 'efg567890123'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_warehouse_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'warehouse_id', name='unique_user_warehouse_assignment')
    )
    op.create_index(op.f('ix_user_warehouse_assignments_id'), 'user_warehouse_assignments', ['id'], unique=False)
    op.create_unique_constraint('unique_product_name_per_owner', 'products', ['name', 'owner_id'])
    op.create_unique_constraint('unique_product_sku_per_owner', 'products', ['sku', 'owner_id'])
    op.add_column('users', sa.Column('role', sa.Enum('admin', 'warehouse_owner', 'user', name='userrole'), nullable=True))
    op.add_column('users', sa.Column('location', sa.String(length=255), nullable=True))
    # Set default role for existing users
    op.execute("UPDATE users SET role = 'USER' WHERE role IS NULL")
    op.alter_column('users', 'role', nullable=False)
    # Set role for existing admins based on is_admin
    op.execute("UPDATE users SET role = 'ADMIN' WHERE is_admin = true")
    op.drop_column('users', 'is_admin')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.false(), nullable=False))
    # Set is_admin based on role for downgrade
    op.execute("UPDATE users SET is_admin = true WHERE role = 'admin'")
    op.alter_column('users', 'is_admin', nullable=False)
    op.drop_column('users', 'role')
    op.drop_column('users', 'location')
    op.drop_constraint('unique_product_sku_per_owner', 'products', type_='unique')
    op.drop_constraint('unique_product_name_per_owner', 'products', type_='unique')
    op.drop_index(op.f('ix_user_warehouse_assignments_id'), table_name='user_warehouse_assignments')
    op.drop_table('user_warehouse_assignments')
    op.execute("DROP TYPE userrole")
    # ### end Alembic commands ###
